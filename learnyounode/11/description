
 # Node.jsを学んで豊かな人生を！

 ## タイムサーバ (13問中10問目)

  TCPのタイムサーバを書いてください！

  最初のコマンドライン引数は、サーバ起動するためのポートです。それぞれのコネ
  クションに今の日付と時間(24時間表記）を返すようにして下さい。

     "YYYY-MM-DD hh:mm"

  その後は改行です。 月、日、時間や分は２桁にゼロパディング(※)してください。

  例：

     "2013-07-06 17:42"

  ※ ゼロパディング：足りない桁を0で埋めること。例えば 1 を2桁にする場合は 01
  となります。

 ─────────────────────────────────────────────────────────────────────────────

 ## ヒント

  この例題のために生の TCP サーバを書いてください。 HTTP 専用の TCP
  は使っていないので Node.js の net モジュールが必要になります。 net
  モジュールには、基本的なネットワークの機能が全て含まれています。

  net には、イベントハンドラのような関数を引数に取る net.createServer()
  という関数があります。
  引数が関数のみでイベント名が無いのでコールバックのようですが、コールバック
  関数と違って何度も呼ばれます。

  それぞれの接続が確立するごとに引数に定義した関数が呼ばれます。

  一般的なイベントハンドラ用関数の例：

     function handler (eventData) { /* ... */ }

  net.createServer()
  もサーバのオブジェクトを返します。特定のポートでリッスンするためは
  server.listen(portNumber) を呼んでください。

  一般的な Node の TCP サーバは次のように記述されています：

     var net = require('net')
     var server = net.createServer(function (socket) {
       // socket handling logic
     })
     server.listen(8000)

  ポート番号には1つ目のコマンドライン引数を使いましょう。忘れないでください
  ！

  socket と言うオブジェクトには、色々な meta のデータが含まれます。
  ただし、その socket は読み書きもできます。 読み書き可能なStream はduplex
  Stream といわれています。

  今回の問題は、データを送信して接続を閉じるだけです。 socket.write(data)
  を使ってデータが送り出せます。

  socket.end() は、その Socket (接続)を閉じます。.end()
  は任意の引数を1つ取ることができます。 その引数は .write と同じく data
  ですので、socket.end(data) などとするとコードが簡単になると思います。

  net モジュールのドキュメントは、このリンクをブラウザで見てください:

  file:///Users/kmaru/.nvm/versions/node/v7.2.0/lib/node_modules/learnyounod
  e/node_apidoc/net.html

  問題に書いてある通り new Date() の日付を整形する必要があります。date
  には色々な役に立つ関数があります：

     date.getFullYear()
     date.getMonth()     // 0からスタートしています
     date.getDate()      // 月の日
     date.getHours()
     date.getMinutes()

  また、 strftime というnpmパッケージには、 Unix の date
  関数と同じフォーマットで日付を整形可能な機能 strftime(fmt, date)
  があります。

  `strftime'
  のドキュメントは次のURLを参照してください。：[https://github.com/samsonjs/
  strftime](https://github.com/samsonjs/strftime)

 ─────────────────────────────────────────────────────────────────────────────

   » この説明をもう一度表示する: learnyounode print
   » 作成したアプリをテスト環境で実行する: learnyounode run program.js
   » 作成したアプリが正しいか検証する: learnyounode verify program.js
   » 出力結果が見づらい場合には --no-color をつけてみてください:
     learnyounode verify program.js --no-color
   » ヘルプを表示する: learnyounode help

